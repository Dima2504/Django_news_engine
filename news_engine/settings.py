"""
Django settings for news_engine project.

Generated by 'django-admin startproject' using Django 3.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '3@y4zujt-xm+v9#t7rc62+k5_65a0%=#dkm@n)4fh)5qvy2!d-'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',

    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.facebook',
    'auth_system.providers.custom_telegram',

    'auth_system.apps.AuthSystemConfig',
    'news.apps.NewsConfig',
    'silk',
    'django_celery_beat',
]

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

SITE_ID = 1



MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'silk.middleware.SilkyMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'news_engine.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'),
                 os.path.join(BASE_DIR, 'auth_system', 'templates'),
                 os.path.join(BASE_DIR, 'news', 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.template.context_processors.media',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'news_engine.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DATABASE_NAME'),
        'HOST': os.getenv('DATABASE_HOST'),
        'PORT': os.getenv('DATABASE_PORT'),
        'USER': os.getenv('DATABASE_USER'),
        'PASSWORD': os.getenv('DATABASE_PASSWORD'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'uk'

TIME_ZONE = 'Europe/Kiev'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
MEDIA_URL = '/media/'


STATIC_ROOT = os.path.join(BASE_DIR, 'files', 'static')
MEDIA_ROOT = os.path.join(BASE_DIR, 'files', 'media')

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]


AUTH_USER_MODEL = 'auth_system.User'

ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_USERNAME_REQUIRED = False

EMAIL_USE_TLS = True
EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")
EMAIL_PORT = os.getenv('EMAIL_PORT')
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER



LOGIN_REDIRECT_URL = 'news:start'

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': os.getenv('GOOGLE_AUTH_CLIENT_ID'),
            'secret': os.getenv('GOOGLE_AUTH_SECRET'),
            'key': '',
        },
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    },
    'facebook': {
        'APP': {
            'client_id': os.getenv('FACEBOOK_AUTH_CLIENT_ID'),
            'secret': os.getenv('FACEBOOK_AUTH_SECRET'),
            'key': '',
        },
        'SCOPE': ['email', ],
        'AUTH_PARAMS': {'auth_type': 'reauthenticate'},
        'METHOD': 'oauth2',
    },
    'custom_telegram': {
        'TOKEN': os.getenv('TELEGRAM_AUTH_BOT_TOKEN'),
    }
}
SOCIALACCOUNT_QUERY_EMAIL = True
TELEGRAM_BOT_USERNAME = os.getenv('TELEGRAM_BOT_USERNAME')

TELEGRAM_MAILING_BOT_TOKEN = os.getenv('TELEGRAM_MAILING_BOT_TOKEN')
TELEGRAM_MAILING_BOT_LINK = os.getenv('TELEGRAM_MAILING_BOT_LINK')
ACCOUNT_FORMS = {
    'login': 'auth_system.forms.MyLoginForm',
    'signup': 'auth_system.forms.MySignupForm',
    'reset_password': 'auth_system.forms.MyResetPasswordForm',
    'reset_password_from_key': 'auth_system.forms.MyResetPasswordKeyForm',
    'change_password': 'auth_system.forms.MyChangePasswordForm',
    'set_password': 'auth_system.forms.MySetPasswordForm',
}
SOCIALACCOUNT_FORMS = {
    'signup': 'auth_system.forms.MySocialSignupForm'
}

NEWS_PER_PAGE = 10

NEWS_API_KEY = os.getenv('NEWSAPI_KEY')
NEWS_API_REQUEST_TIMEDELTA_MINUTES = 10
NEWS_TO_SAVE_AFTER_CLEAN = 200
NEWS_CLEAR_DB_TIMEDELTA_DAYS = 1

REDIS_HOST = '0.0.0.0'
REDIS_PORT = '6379'

CELERY_BROKER_URL = 'redis://'+ REDIS_HOST + ':' + REDIS_PORT + '/0'
CELERY_BROKER_TRANSPORT_OPTIONS = {'visibility_timeout': 3600}
CELERY_RESULT_BACKEND = 'redis://'+ REDIS_HOST + ':' + REDIS_PORT + '/0'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
        'db':{
            'format': '{levelname} {asctime} {duration} {params}\n{sql}',
            'style': '{',
        },
        'celery_task': {
            '()': 'celery.app.log.TaskFormatter',
            'format': '[%(asctime)s: %(levelname)s/%(processName)s] %(task_name)s[%(task_id)s]: %(message)s',
        }
    },
    'handlers': {
        'file_views': {
            'class': 'logging.handlers.RotatingFileHandler',
            'level': 'DEBUG',
            'filename': os.path.join(BASE_DIR, 'logs/news-views.log'),
            'formatter': 'verbose',
            'maxBytes': 1024*1024*10,
        },
        'file_db': {
            'class': 'logging.handlers.RotatingFileHandler',
            'level': 'DEBUG',
            'filename': os.path.join(BASE_DIR, 'logs/db/sql.log'),
            'formatter': 'db',
            'maxBytes': 1024*1024*5,
            'backupCount': 10,
        },
        'celery_file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'level': 'DEBUG',
            'filename': os.path.join(BASE_DIR, 'logs/celery/tasks.log'),
            'formatter': 'celery_task',
            'maxBytes': 1024*1024*5,
            'backupCount': 10,
        }
    },
    'loggers': {
        'news.views': {
            'handlers': ['file_views', ],
            'level': 'DEBUG',
        },
        'django.db.backends':{
            'handlers': ['file_db', ],
            'level': 'DEBUG',
            'propagate': False,
        },
        'news.tasks': {
            'handlers': ['celery_file', ],
            'level': 'DEBUG',
        }
    }
}